# azure-pipelines.yml
trigger:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  # Define the environment variables to be used in the script
  ORG_NAME: $(DevOps Organisation Name)
  PROJECT_NAME: $(DevOps Project Name)
  SOLUTION_NAME: $(Solution Name)
  RELEASE_VERSION: $(Release Version)
  RELEASE_QUERY: $(Release Query)
  GPT_API_KEY: $(GPT API Key) # GPT API Key stored as a secret
  SOFTWARE_SUMMARY: $(Software Summary)
  DESIRED_WORK_ITEM_TYPES: $(Work Item Types)
  OUTPUT_FOLDER: $(Output Folder)
  GITHUB_REPO_URL: $(GitHub Repo Url)
  GITHUB_TAG: $(GitHub Tag) # Default to main branch; can be a specific tag or release
  COMMIT_REPO_PATH: $(Commit Repo Url) # Repository path to commit release notes
  COMMIT_BRANCH: $(Commit Branch) # Branch to commit release notes to

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
      addToPath: true

  - script: |
      git clone --branch $(GITHUB_TAG) $(GITHUB_REPO_URL) script-repo
    displayName: "Clone GitHub Repository"

  - script: |
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)"  clone $(COMMIT_REPO_PATH) target-repo
    displayName: 'Clone Target Repository'

  - script: |
      cd script-repo
      python -m venv .venv
      source .venv/bin/activate
      pip install -r requirements.txt
    displayName: "Set up Python environment"

  - script: |
      cd script-repo
      cat <<EOF > .env
      ORG_NAME=$DEVOPS_ORGANISATION_NAME
      PROJECT_NAME=$PROJECT_NAME
      SOLUTION_NAME=$SOLUTION_NAME
      RELEASE_VERSION=$RELEASE_VERSION
      RELEASE_QUERY=$RELEASE_QUERY
      GPT_API_KEY=$GPT_API_KEY
      PAT=$SYSTEM_ACCESSTOKEN
      MODEL=$MODEL
      MODEL_BASE_URL=$MODEL_BASE_URL
      DEVOPS_BASE_URL=$DEVOPS_BASE_URL
      SOFTWARE_SUMMARY=$SOFTWARE_SUMMARY
      DESIRED_WORK_ITEM_TYPES=$DESIRED_WORK_ITEM_TYPES
      OUTPUT_FOLDER=$OUTPUT_FOLDER
      DEVOPS_API_VERSION=6.0
      EOF
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      GPT_API_KEY: $(GPT_API_KEY)
    displayName: 'Create .env file'

  - script: |
      cd script-repo
      source .venv/bin/activate
      python main.py
    displayName: "Run release notes script"


  - script: |
      cp -r "script-repo/$(OUTPUT_FOLDER)/*" "target-repo/$(OUTPUT_FOLDER)/"
      cd target-repo
      git config --global user.email "$(Build.RequestedForEmail)"
      git config --global user.name "$(Build.RequestedFor)"
      git checkout -b $(COMMIT_BRANCH) || git checkout $(COMMIT_BRANCH)
      git add "$(OUTPUT_FOLDER)/*"
      git commit -m "Add release notes for version $(RELEASE_VERSION)"
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(COMMIT_BRANCH)
    displayName: 'Commit and push release notes'
