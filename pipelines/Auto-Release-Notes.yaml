# azure-pipelines.yml
trigger:
 branches:
   include:
     - main

pool:
  vmImage: "ubuntu-latest"

variables:
  # The name of the DevOps organization.
  ORG_NAME: "YOUR_ORG_NAME" #REPLACEME
  # The name of the DevOps project.
  PROJECT_NAME: "YOUR_PROJECT_NAME" #REPLACEME
  # The name of the solution.
  SOLUTION_NAME: "YOUR_SOLUTION_NAME" #REPLACEME
  # The query to retrieve the release information.
  RELEASE_QUERY: "DEVOPS_WORK_ITEM_QUERY_GUID" #REPLACEME
  # A summary of the software.
  SOFTWARE_SUMMARY: "LONG_SOFTWARE_SUMMARY" #REPLACEME
  # The API key for the GPT service (stored as a secret) DO NOT MODIFY THE BELOW OR ENTER YOUR API KEY HERE.
  MODEL_API_KEY: $(Model API Key)

parameters:
  - name: majorVersion
    type: string
    default: "1"
    displayName: "Major Version"
  - name: minorVersion
    type: string
    default: "0"
    displayName: "Minor Version"
  - name: outputFolder
    type: string
    default: "Releases"
    displayName: "Output Folder Name"
  - name: desiredWorkItemTypes
    type: string
    default: "Bug,User Story,Task"
    displayName: "Desired Work Item Types"
  - name: commitBranch
    type: string
    default: "main"
    displayName: "Target Repo Branch"
  - name: model
    type: string
    default: "gpt-4o"
    displayName: "AI Model"
  - name: modelBaseUrl
    type: string
    default: "https://api.openai.com/v1"
    displayName: "AI Model Base URL"

steps:
  - checkout: self
    persistCredentials: true
    fetchDepth: 1
    path: target-repo

  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
      addToPath: true

  - script: |
      git clone --branch main https://github.com/hankanman/Auto-Release-Notes.git script-repo
    displayName: "Clone GitHub Repository"

  - script: |
      cd script-repo
      python -m venv .venv
      source .venv/bin/activate
      pip install -r requirements.txt
    displayName: "Set up Python environment"

  - script: |
      cd script-repo
      cat <<EOF > .env
      ORG_NAME=$DEVOPS_ORGANISATION_NAME
      PROJECT_NAME=$PROJECT_NAME
      SOLUTION_NAME=$SOLUTION_NAME
      RELEASE_VERSION=${{parameters.majorVersion}}.${{parameters.minorVersion}}.$(date '+%Y%m%d').1
      RELEASE_QUERY=$RELEASE_QUERY
      GPT_API_KEY=$GPT_API_KEY
      PAT=$SYSTEM_ACCESSTOKEN
      MODEL=${{parameters.model}}
      MODEL_BASE_URL=${{parameters.modelBaseUrl}}
      DEVOPS_BASE_URL="https://dev.azure.com"
      SOFTWARE_SUMMARY=$SOFTWARE_SUMMARY
      DESIRED_WORK_ITEM_TYPES=${{parameters.desiredWorkItemTypes}}
      OUTPUT_FOLDER=${{parameters.outputFolder}}
      DEVOPS_API_VERSION="6.0"
      EOF
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      GPT_API_KEY: $(Model API Key)
    displayName: 'Create .env file'

  - script: |
      cd script-repo
      source .venv/bin/activate
      python main.py
    displayName: "Run release notes script"


  - script: |
      mkdir -p "${{parameters.outputFolder}}"
      cp -r "script-repo/${{parameters.outputFolder}}/"* "${{parameters.outputFolder}}/"
      cd target-repo
      git config --global user.email "$(Build.RequestedForEmail)"
      git config --global user.name "$(Build.RequestedFor)"
      git checkout -b ${{parameters.commitBranch}} || git checkout ${{parameters.commitBranch}}
      git add "${{parameters.outputFolder}}/*"
      git commit -m "Add release notes for version ${{parameters.majorVersion}}.${{parameters.minorVersion}}.$(date '+%Y%m%d').1"
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin ${{parameters.commitBranch}}
    displayName: 'Commit and push release notes'
